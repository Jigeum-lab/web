/**
 * Generated by orval v7.1.1 üç∫
 * Do not edit manually.
 * PhaseOn API
 * ÌéòÏù¥Ï¶àÏò® API Î¨∏ÏÑú
 * OpenAPI spec version: v1
 */
import {
  useMutation
} from '@tanstack/react-query'
import type {
  MutationFunction,
  UseMutationOptions,
  UseMutationResult
} from '@tanstack/react-query'
import type {
  ApiResponseObject,
  ApiResponseUserResponse,
  UserNicknameUpdateRequest
} from '../../types/apis'
import { customInstance } from '../../api/custom-instance';
import type { ErrorType, BodyType } from '../../api/custom-instance';



/**
 * @summary ÌîÑÎ°úÌïÑ Ïù¥ÎØ∏ÏßÄ ÏàòÏ†ï
 */
export const updateProfileImage = (
    
 ) => {
      
      
      return customInstance<ApiResponseUserResponse>(
      {url: `/api/v1/users/profile-image`, method: 'PATCH'
    },
      );
    }
  


export const getUpdateProfileImageMutationOptions = <TError = ErrorType<ApiResponseObject>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof updateProfileImage>>, TError,void, TContext>, }
): UseMutationOptions<Awaited<ReturnType<typeof updateProfileImage>>, TError,void, TContext> => {
const {mutation: mutationOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof updateProfileImage>>, void> = () => {
          

          return  updateProfileImage()
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type UpdateProfileImageMutationResult = NonNullable<Awaited<ReturnType<typeof updateProfileImage>>>
    
    export type UpdateProfileImageMutationError = ErrorType<ApiResponseObject>

    /**
 * @summary ÌîÑÎ°úÌïÑ Ïù¥ÎØ∏ÏßÄ ÏàòÏ†ï
 */
export const useUpdateProfileImage = <TError = ErrorType<ApiResponseObject>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof updateProfileImage>>, TError,void, TContext>, }
): UseMutationResult<
        Awaited<ReturnType<typeof updateProfileImage>>,
        TError,
        void,
        TContext
      > => {

      const mutationOptions = getUpdateProfileImageMutationOptions(options);

      return useMutation(mutationOptions);
    }
    /**
 * @summary ÎãâÎÑ§ÏûÑ ÏàòÏ†ï
 */
export const updateNickname = (
    userNicknameUpdateRequest: BodyType<UserNicknameUpdateRequest>,
 ) => {
      
      
      return customInstance<ApiResponseObject>(
      {url: `/api/v1/users/nickname`, method: 'PATCH',
      headers: {'Content-Type': 'application/json', },
      data: userNicknameUpdateRequest
    },
      );
    }
  


export const getUpdateNicknameMutationOptions = <TError = ErrorType<ApiResponseObject>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof updateNickname>>, TError,{data: BodyType<UserNicknameUpdateRequest>}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<typeof updateNickname>>, TError,{data: BodyType<UserNicknameUpdateRequest>}, TContext> => {
const {mutation: mutationOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof updateNickname>>, {data: BodyType<UserNicknameUpdateRequest>}> = (props) => {
          const {data} = props ?? {};

          return  updateNickname(data,)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type UpdateNicknameMutationResult = NonNullable<Awaited<ReturnType<typeof updateNickname>>>
    export type UpdateNicknameMutationBody = BodyType<UserNicknameUpdateRequest>
    export type UpdateNicknameMutationError = ErrorType<ApiResponseObject>

    /**
 * @summary ÎãâÎÑ§ÏûÑ ÏàòÏ†ï
 */
export const useUpdateNickname = <TError = ErrorType<ApiResponseObject>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof updateNickname>>, TError,{data: BodyType<UserNicknameUpdateRequest>}, TContext>, }
): UseMutationResult<
        Awaited<ReturnType<typeof updateNickname>>,
        TError,
        {data: BodyType<UserNicknameUpdateRequest>},
        TContext
      > => {

      const mutationOptions = getUpdateNicknameMutationOptions(options);

      return useMutation(mutationOptions);
    }
    