/**
 * Generated by orval v7.1.1 üç∫
 * Do not edit manually.
 * PhaseOn API
 * ÌéòÏù¥Ï¶àÏò® API Î¨∏ÏÑú
 * OpenAPI spec version: v1
 */
import {
  faker
} from '@faker-js/faker'
import {
  HttpResponse,
  delay,
  http
} from 'msw'
import type {
  ApiResponseObject,
  ApiResponseUserResponse
} from '../../types/apis'

export const getUpdateProfileImageResponseMock = (overrideResponse: Partial< ApiResponseUserResponse > = {}): ApiResponseUserResponse => ({data: faker.helpers.arrayElement([{email: faker.word.sample(), enabled: faker.datatype.boolean(), links: Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({type: faker.word.sample(), url: faker.word.sample()})), name: faker.helpers.arrayElement([faker.word.sample(), undefined]), nickname: faker.helpers.arrayElement([faker.word.sample(), undefined]), notifications: Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({status: faker.datatype.boolean(), type: faker.word.sample()})), phone: faker.helpers.arrayElement([faker.word.sample(), undefined]), profileImageUrl: faker.helpers.arrayElement([faker.word.sample(), undefined]), userId: faker.number.int({min: undefined, max: undefined})}, undefined]), error: faker.helpers.arrayElement([{code: faker.word.sample(), message: faker.helpers.arrayElement([faker.word.sample(), undefined]), properties: {
        [faker.string.alphanumeric(5)]: {}
      }}, undefined]), success: faker.datatype.boolean(), ...overrideResponse})

export const getUpdateNicknameResponseMock = (overrideResponse: Partial< ApiResponseObject > = {}): ApiResponseObject => ({data: faker.helpers.arrayElement([{}, undefined]), error: faker.helpers.arrayElement([{code: faker.word.sample(), message: faker.helpers.arrayElement([faker.word.sample(), undefined]), properties: {
        [faker.string.alphanumeric(5)]: {}
      }}, undefined]), success: faker.datatype.boolean(), ...overrideResponse})


export const getUpdateProfileImageMockHandler = (overrideResponse?: ApiResponseUserResponse | ((info: Parameters<Parameters<typeof http.patch>[1]>[0]) => Promise<ApiResponseUserResponse> | ApiResponseUserResponse)) => {
  return http.patch('*/api/v1/users/profile-image', async (info) => {await delay(1000);
  
    return new HttpResponse(JSON.stringify(overrideResponse !== undefined 
            ? (typeof overrideResponse === "function" ? await overrideResponse(info) : overrideResponse) 
            : getUpdateProfileImageResponseMock()),
      { status: 200,
        headers: { 'Content-Type': 'application/json' }
      })
  })
}

export const getUpdateNicknameMockHandler = (overrideResponse?: ApiResponseObject | ((info: Parameters<Parameters<typeof http.patch>[1]>[0]) => Promise<ApiResponseObject> | ApiResponseObject)) => {
  return http.patch('*/api/v1/users/nickname', async (info) => {await delay(1000);
  
    return new HttpResponse(JSON.stringify(overrideResponse !== undefined 
            ? (typeof overrideResponse === "function" ? await overrideResponse(info) : overrideResponse) 
            : getUpdateNicknameResponseMock()),
      { status: 200,
        headers: { 'Content-Type': 'application/json' }
      })
  })
}
export const getUserControllerMock = () => [
  getUpdateProfileImageMockHandler(),
  getUpdateNicknameMockHandler()
]
