/**
 * Generated by orval v7.1.1 üç∫
 * Do not edit manually.
 * PhaseOn API
 * ÌéòÏù¥Ï¶àÏò® API Î¨∏ÏÑú
 * OpenAPI spec version: v1
 */
import {
  useMutation
} from '@tanstack/react-query'
import type {
  MutationFunction,
  UseMutationOptions,
  UseMutationResult
} from '@tanstack/react-query'
import type {
  ApiResponseObject
} from '../../types/apis'
import { customInstance } from '../../api/custom-instance';
import type { ErrorType } from '../../api/custom-instance';



/**
 * @summary ÌÜ†ÌÅ∞ Î¶¨ÌîÑÎ†àÏâ¨
 */
export const login = (
    
 ) => {
      
      
      return customInstance<ApiResponseObject>(
      {url: `/api/v1/auth/refresh`, method: 'POST'
    },
      );
    }
  


export const getLoginMutationOptions = <TError = ErrorType<ApiResponseObject>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof login>>, TError,void, TContext>, }
): UseMutationOptions<Awaited<ReturnType<typeof login>>, TError,void, TContext> => {
const {mutation: mutationOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof login>>, void> = () => {
          

          return  login()
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type LoginMutationResult = NonNullable<Awaited<ReturnType<typeof login>>>
    
    export type LoginMutationError = ErrorType<ApiResponseObject>

    /**
 * @summary ÌÜ†ÌÅ∞ Î¶¨ÌîÑÎ†àÏâ¨
 */
export const useLogin = <TError = ErrorType<ApiResponseObject>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof login>>, TError,void, TContext>, }
): UseMutationResult<
        Awaited<ReturnType<typeof login>>,
        TError,
        void,
        TContext
      > => {

      const mutationOptions = getLoginMutationOptions(options);

      return useMutation(mutationOptions);
    }
    