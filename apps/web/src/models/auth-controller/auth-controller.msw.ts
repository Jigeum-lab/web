/**
 * Generated by orval v7.1.1 🍺
 * Do not edit manually.
 * PhaseOn API
 * 페이즈온 API 문서
 * OpenAPI spec version: v1
 */
import {
  faker
} from '@faker-js/faker'
import {
  HttpResponse,
  delay,
  http
} from 'msw'
import type {
  ApiResponseObject
} from '../../types/apis'

export const getLoginResponseMock = (overrideResponse: Partial< ApiResponseObject > = {}): ApiResponseObject => ({data: faker.helpers.arrayElement([{}, undefined]), error: faker.helpers.arrayElement([{code: faker.word.sample(), message: faker.helpers.arrayElement([faker.word.sample(), undefined]), properties: {
        [faker.string.alphanumeric(5)]: {}
      }}, undefined]), success: faker.datatype.boolean(), ...overrideResponse})


export const getLoginMockHandler = (overrideResponse?: ApiResponseObject | ((info: Parameters<Parameters<typeof http.post>[1]>[0]) => Promise<ApiResponseObject> | ApiResponseObject)) => {
  return http.post('*/api/v1/auth/refresh', async (info) => {await delay(1000);
  
    return new HttpResponse(JSON.stringify(overrideResponse !== undefined 
            ? (typeof overrideResponse === "function" ? await overrideResponse(info) : overrideResponse) 
            : getLoginResponseMock()),
      { status: 200,
        headers: { 'Content-Type': 'application/json' }
      })
  })
}
export const getAuthControllerMock = () => [
  getLoginMockHandler()
]
