/**
 * Generated by orval v7.1.1 üç∫
 * Do not edit manually.
 * PhaseOn API
 * ÌéòÏù¥Ï¶àÏò® API Î¨∏ÏÑú
 * OpenAPI spec version: v1
 */
import {
  faker
} from '@faker-js/faker'
import {
  HttpResponse,
  delay,
  http
} from 'msw'
import type {
  ApiResponseBoolean,
  ApiResponseProject
} from '../../types/apis'

export const getCreateProjectResponseMock = (overrideResponse: Partial< ApiResponseProject > = {}): ApiResponseProject => ({data: faker.helpers.arrayElement([{accomplishmentText: faker.helpers.arrayElement([faker.word.sample(), undefined]), authorId: faker.number.int({min: undefined, max: undefined}), badges: Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({awardDate: `${faker.date.past().toISOString().split('.')[0]}Z`, awardDetails: faker.word.sample(), awardName: faker.word.sample(), imageUrl: faker.word.sample(), issuingOrganization: faker.word.sample(), order: faker.number.int({min: undefined, max: undefined})})), banner: faker.helpers.arrayElement([faker.word.sample(), undefined]), brandColor: faker.helpers.arrayElement([faker.word.sample(), undefined]), carouselMedias: Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({mediaType: faker.helpers.arrayElement(['IMAGE','VIDEO'] as const), order: faker.number.int({min: undefined, max: undefined}), url: faker.word.sample()})), categories: faker.helpers.arrayElements(['AI','HEALTHCARE','SOCIAL_EFFECT','EDUCATION','TRAVEL'] as const), content: faker.word.sample(), createdAt: `${faker.date.past().toISOString().split('.')[0]}Z`, id: faker.number.int({min: undefined, max: undefined}), likeCount: faker.number.int({min: undefined, max: undefined}), links: Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({link: faker.word.sample(), order: faker.number.int({min: undefined, max: undefined}), type: faker.helpers.arrayElement(['INSTAGRAM','NOTION','GITHUB','GOOGLE_PLAY','APP_STORE','YOUTUBE','WEBSITE','ETC'] as const)})), makers: Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({editable: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), isEditable: faker.datatype.boolean(), makerId: faker.number.int({min: undefined, max: undefined}), roles: faker.helpers.arrayElements(['PROJECT_MANAGER','PROJECT_OWNER','PROJECT_LEADER','PROJECT_ASSISTANT','QUALITY_ASSURANCE','DEVELOPER','DEVELOPER_FULLSTACK','DEVELOPER_BACKEND','DEVELOPER_WEB_FRONTEND','DEVELOPER_APP_ANDROID','DEVELOPER_APP_IOS','DEVELOPER_APP_FLUTTER','DEVELOPER_APP_REACTNATIVE','DEVELOPER_DEVOPS','DEVELOPER_AI','DESIGNER','DESIGNER_UXUI','DESIGNER_BX','MARKETER'] as const)})), phase: faker.helpers.arrayElement([faker.helpers.arrayElement(['PHASE_0','PHASE_1','PHASE_2','PHASE_3','PHASE_4','PHASE_5'] as const), undefined]), pressReleases: Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({order: faker.number.int({min: undefined, max: undefined}), url: faker.word.sample()})), release: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({createdAt: `${faker.date.past().toISOString().split('.')[0]}Z`, createdDate: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), description: faker.helpers.arrayElement([faker.word.sample(), undefined]), id: faker.number.int({min: undefined, max: undefined}), title: faker.word.sample()})), undefined]), releaseReleases: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({order: faker.number.int({min: undefined, max: undefined}), url: faker.word.sample()})), undefined]), releases: Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({createdAt: `${faker.date.past().toISOString().split('.')[0]}Z`, createdDate: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), description: faker.helpers.arrayElement([faker.word.sample(), undefined]), id: faker.number.int({min: undefined, max: undefined}), title: faker.word.sample()})), slug: faker.word.sample(), status: faker.helpers.arrayElement(['PHASE_0','PHASE_1','PHASE_2','PHASE_3','PHASE_4','PHASE_5'] as const), subscribeCount: faker.number.int({min: undefined, max: undefined}), subscribers: Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.number.int({min: undefined, max: undefined}), userId: faker.number.int({min: undefined, max: undefined})})), subTitle: faker.helpers.arrayElement([faker.word.sample(), undefined]), summary: faker.helpers.arrayElement([faker.word.sample(), undefined]), teamGoal: faker.helpers.arrayElement([faker.word.sample(), undefined]), thumbnail: faker.helpers.arrayElement([faker.word.sample(), undefined]), title: faker.word.sample(), updatedAt: `${faker.date.past().toISOString().split('.')[0]}Z`, viewCount: faker.number.int({min: undefined, max: undefined})}, undefined]), error: faker.helpers.arrayElement([{code: faker.word.sample(), message: faker.helpers.arrayElement([faker.word.sample(), undefined]), properties: {
        [faker.string.alphanumeric(5)]: {}
      }}, undefined]), success: faker.datatype.boolean(), ...overrideResponse})

export const getCheckSlugAvailabilityResponseMock = (overrideResponse: Partial< ApiResponseBoolean > = {}): ApiResponseBoolean => ({data: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), error: faker.helpers.arrayElement([{code: faker.word.sample(), message: faker.helpers.arrayElement([faker.word.sample(), undefined]), properties: {
        [faker.string.alphanumeric(5)]: {}
      }}, undefined]), success: faker.datatype.boolean(), ...overrideResponse})


export const getCreateProjectMockHandler = (overrideResponse?: ApiResponseProject | ((info: Parameters<Parameters<typeof http.post>[1]>[0]) => Promise<ApiResponseProject> | ApiResponseProject)) => {
  return http.post('*/api/v1/projects', async (info) => {await delay(1000);
  
    return new HttpResponse(JSON.stringify(overrideResponse !== undefined 
            ? (typeof overrideResponse === "function" ? await overrideResponse(info) : overrideResponse) 
            : getCreateProjectResponseMock()),
      { status: 200,
        headers: { 'Content-Type': 'application/json' }
      })
  })
}

export const getCheckSlugAvailabilityMockHandler = (overrideResponse?: ApiResponseBoolean | ((info: Parameters<Parameters<typeof http.get>[1]>[0]) => Promise<ApiResponseBoolean> | ApiResponseBoolean)) => {
  return http.get('*/api/v1/slug-check', async (info) => {await delay(1000);
  
    return new HttpResponse(JSON.stringify(overrideResponse !== undefined 
            ? (typeof overrideResponse === "function" ? await overrideResponse(info) : overrideResponse) 
            : getCheckSlugAvailabilityResponseMock()),
      { status: 200,
        headers: { 'Content-Type': 'application/json' }
      })
  })
}
export const getProjectCreateApiMock = () => [
  getCreateProjectMockHandler(),
  getCheckSlugAvailabilityMockHandler()
]
