/**
 * Generated by orval v7.1.1 üç∫
 * Do not edit manually.
 * PhaseOn API
 * ÌéòÏù¥Ï¶àÏò® API Î¨∏ÏÑú
 * OpenAPI spec version: v1
 */
import {
  useInfiniteQuery,
  useMutation,
  useQuery
} from '@tanstack/react-query'
import type {
  DefinedInitialDataOptions,
  DefinedUseInfiniteQueryResult,
  DefinedUseQueryResult,
  InfiniteData,
  MutationFunction,
  QueryFunction,
  QueryKey,
  UndefinedInitialDataOptions,
  UseInfiniteQueryOptions,
  UseInfiniteQueryResult,
  UseMutationOptions,
  UseMutationResult,
  UseQueryOptions,
  UseQueryResult
} from '@tanstack/react-query'
import type {
  ApiResponseAccomplishmentData,
  ApiResponseListReleaseData,
  ApiResponseObject,
  ApiResponseProjectData,
  ApiResponseProjectLikeResponse,
  ApiResponseProjectPageData,
  ApiResponseProjectTeamData,
  ApiResponseSetProjectCategory,
  GetProjectListParams
} from '../../types/apis'
import { customInstance } from '../../api/custom-instance';
import type { ErrorType } from '../../api/custom-instance';



/**
 * ## ÌîÑÎ°úÏ†ùÌä∏ Î™©Î°ùÏùÑ Ï°∞ÌöåÌïòÎäî API ÏûÖÎãàÎã§.
**Ïπ¥ÌÖåÍ≥†Î¶¨ ÌååÎùºÎß§ÌÑ∞**Í∞Ä ÏóÜÏùÑ Í≤ΩÏö∞ Î™®Îì† ÌîÑÎ°úÏ†ùÌä∏Î•º Ï°∞ÌöåÌïòÎ©∞, Ïπ¥ÌÖåÍ≥†Î¶¨ ÌååÎùºÎØ∏ÌÑ∞Í∞Ä ÏûàÏùÑ Í≤ΩÏö∞ Ìï¥Îãπ Ïπ¥ÌÖåÍ≥†Î¶¨Ïùò ÌîÑÎ°úÏ†ùÌä∏Î•º Ï°∞ÌöåÌï©ÎãàÎã§.

Ï†ïÎ†¨ÏùÄ Îã§Ïùå ÌååÎùºÎØ∏ÌÑ∞Î•º ÏÇ¨Ïö©Ìï† Ïàò ÏûàÏäµÎãàÎã§.

`createdAt(Í∏∞Î≥∏Í∞í)`, `id`, `updatedAt`, `viewCount`, `shortDescription`, `summary`, `title`, `description`, `status`, `likeCount`
- ex) sort=createdAt,desc
- ex) sort=likeCount,desc
 * @summary ÌîÑÎ°úÏ†ùÌä∏ Î™©Î°ù Ï°∞Ìöå
 */
export const getProjectList = (
    params?: GetProjectListParams,
 signal?: AbortSignal
) => {
      
      
      return customInstance<ApiResponseProjectPageData>(
      {url: `/api/v1/projects`, method: 'GET',
        params, signal
    },
      );
    }
  

export const getGetProjectListQueryKey = (params?: GetProjectListParams,) => {
    return [`/api/v1/projects`, ...(params ? [params]: [])] as const;
    }

    
export const getGetProjectListInfiniteQueryOptions = <TData = InfiniteData<Awaited<ReturnType<typeof getProjectList>>>, TError = ErrorType<ApiResponseObject>>(params?: GetProjectListParams, options?: { query?:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof getProjectList>>, TError, TData>>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetProjectListQueryKey(params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getProjectList>>> = ({ signal }) => getProjectList(params, signal);

      

      

   return  { queryKey, queryFn,   staleTime: 300000,  ...queryOptions} as UseInfiniteQueryOptions<Awaited<ReturnType<typeof getProjectList>>, TError, TData> & { queryKey: QueryKey }
}

export type GetProjectListInfiniteQueryResult = NonNullable<Awaited<ReturnType<typeof getProjectList>>>
export type GetProjectListInfiniteQueryError = ErrorType<ApiResponseObject>


export function useGetProjectListInfinite<TData = InfiniteData<Awaited<ReturnType<typeof getProjectList>>>, TError = ErrorType<ApiResponseObject>>(
 params: undefined |  GetProjectListParams, options: { query:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof getProjectList>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getProjectList>>,
          TError,
          TData
        > , 'initialData'
      >, }

  ):  DefinedUseInfiniteQueryResult<TData, TError> & { queryKey: QueryKey }
export function useGetProjectListInfinite<TData = InfiniteData<Awaited<ReturnType<typeof getProjectList>>>, TError = ErrorType<ApiResponseObject>>(
 params?: GetProjectListParams, options?: { query?:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof getProjectList>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getProjectList>>,
          TError,
          TData
        > , 'initialData'
      >, }

  ):  UseInfiniteQueryResult<TData, TError> & { queryKey: QueryKey }
export function useGetProjectListInfinite<TData = InfiniteData<Awaited<ReturnType<typeof getProjectList>>>, TError = ErrorType<ApiResponseObject>>(
 params?: GetProjectListParams, options?: { query?:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof getProjectList>>, TError, TData>>, }

  ):  UseInfiniteQueryResult<TData, TError> & { queryKey: QueryKey }
/**
 * @summary ÌîÑÎ°úÏ†ùÌä∏ Î™©Î°ù Ï°∞Ìöå
 */

export function useGetProjectListInfinite<TData = InfiniteData<Awaited<ReturnType<typeof getProjectList>>>, TError = ErrorType<ApiResponseObject>>(
 params?: GetProjectListParams, options?: { query?:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof getProjectList>>, TError, TData>>, }

  ):  UseInfiniteQueryResult<TData, TError> & { queryKey: QueryKey } {

  const queryOptions = getGetProjectListInfiniteQueryOptions(params,options)

  const query = useInfiniteQuery(queryOptions) as  UseInfiniteQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



export const getGetProjectListQueryOptions = <TData = Awaited<ReturnType<typeof getProjectList>>, TError = ErrorType<ApiResponseObject>>(params?: GetProjectListParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getProjectList>>, TError, TData>>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetProjectListQueryKey(params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getProjectList>>> = ({ signal }) => getProjectList(params, signal);

      

      

   return  { queryKey, queryFn,   staleTime: 300000,  ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getProjectList>>, TError, TData> & { queryKey: QueryKey }
}

export type GetProjectListQueryResult = NonNullable<Awaited<ReturnType<typeof getProjectList>>>
export type GetProjectListQueryError = ErrorType<ApiResponseObject>


export function useGetProjectList<TData = Awaited<ReturnType<typeof getProjectList>>, TError = ErrorType<ApiResponseObject>>(
 params: undefined |  GetProjectListParams, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getProjectList>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getProjectList>>,
          TError,
          TData
        > , 'initialData'
      >, }

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: QueryKey }
export function useGetProjectList<TData = Awaited<ReturnType<typeof getProjectList>>, TError = ErrorType<ApiResponseObject>>(
 params?: GetProjectListParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getProjectList>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getProjectList>>,
          TError,
          TData
        > , 'initialData'
      >, }

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey }
export function useGetProjectList<TData = Awaited<ReturnType<typeof getProjectList>>, TError = ErrorType<ApiResponseObject>>(
 params?: GetProjectListParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getProjectList>>, TError, TData>>, }

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey }
/**
 * @summary ÌîÑÎ°úÏ†ùÌä∏ Î™©Î°ù Ï°∞Ìöå
 */

export function useGetProjectList<TData = Awaited<ReturnType<typeof getProjectList>>, TError = ErrorType<ApiResponseObject>>(
 params?: GetProjectListParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getProjectList>>, TError, TData>>, }

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } {

  const queryOptions = getGetProjectListQueryOptions(params,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



/**
 *  ## ÌîÑÎ°úÏ†ùÌä∏ Ï¢ãÏïÑÏöî Îì±Î°ù/Ï∑®ÏÜå API ÏûÖÎãàÎã§.
- Ïù¥ÎØ∏ Ï¢ãÏïÑÏöîÎ•º ÎàÑÎ•∏ Í≤ΩÏö∞ Ï∑®ÏÜåÎê©ÎãàÎã§.
- Ï¢ãÏïÑÏöîÎ•º ÎàÑÎ•¥ÏßÄ ÏïäÏùÄ Í≤ΩÏö∞ Îì±Î°ùÎê©ÎãàÎã§.
 * @summary ÌîÑÎ°úÏ†ùÌä∏ Ï¢ãÏïÑÏöî Îì±Î°ù/Ï∑®ÏÜå
 */
export const likeProject = (
    slug: string,
 ) => {
      
      
      return customInstance<ApiResponseProjectLikeResponse>(
      {url: `/api/v1/projects/${slug}/like`, method: 'POST'
    },
      );
    }
  


export const getLikeProjectMutationOptions = <TError = ErrorType<ApiResponseObject>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof likeProject>>, TError,{slug: string}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<typeof likeProject>>, TError,{slug: string}, TContext> => {
const {mutation: mutationOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof likeProject>>, {slug: string}> = (props) => {
          const {slug} = props ?? {};

          return  likeProject(slug,)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type LikeProjectMutationResult = NonNullable<Awaited<ReturnType<typeof likeProject>>>
    
    export type LikeProjectMutationError = ErrorType<ApiResponseObject>

    /**
 * @summary ÌîÑÎ°úÏ†ùÌä∏ Ï¢ãÏïÑÏöî Îì±Î°ù/Ï∑®ÏÜå
 */
export const useLikeProject = <TError = ErrorType<ApiResponseObject>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof likeProject>>, TError,{slug: string}, TContext>, }
): UseMutationResult<
        Awaited<ReturnType<typeof likeProject>>,
        TError,
        {slug: string},
        TContext
      > => {

      const mutationOptions = getLikeProjectMutationOptions(options);

      return useMutation(mutationOptions);
    }
    /**
 * @summary ÌîÑÎ°úÏ†ùÌä∏ Ï∞∏Í∞Ä Î©§Î≤Ñ Ï°∞Ìöå
 */
export const getProjectMembers = (
    slug: string,
 signal?: AbortSignal
) => {
      
      
      return customInstance<ApiResponseProjectTeamData>(
      {url: `/api/v1/projects/${slug}/makers`, method: 'GET', signal
    },
      );
    }
  

export const getGetProjectMembersQueryKey = (slug: string,) => {
    return [`/api/v1/projects/${slug}/makers`] as const;
    }

    
export const getGetProjectMembersInfiniteQueryOptions = <TData = InfiniteData<Awaited<ReturnType<typeof getProjectMembers>>>, TError = ErrorType<ApiResponseObject>>(slug: string, options?: { query?:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof getProjectMembers>>, TError, TData>>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetProjectMembersQueryKey(slug);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getProjectMembers>>> = ({ signal }) => getProjectMembers(slug, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(slug),  staleTime: 300000,  ...queryOptions} as UseInfiniteQueryOptions<Awaited<ReturnType<typeof getProjectMembers>>, TError, TData> & { queryKey: QueryKey }
}

export type GetProjectMembersInfiniteQueryResult = NonNullable<Awaited<ReturnType<typeof getProjectMembers>>>
export type GetProjectMembersInfiniteQueryError = ErrorType<ApiResponseObject>


export function useGetProjectMembersInfinite<TData = InfiniteData<Awaited<ReturnType<typeof getProjectMembers>>>, TError = ErrorType<ApiResponseObject>>(
 slug: string, options: { query:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof getProjectMembers>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getProjectMembers>>,
          TError,
          TData
        > , 'initialData'
      >, }

  ):  DefinedUseInfiniteQueryResult<TData, TError> & { queryKey: QueryKey }
export function useGetProjectMembersInfinite<TData = InfiniteData<Awaited<ReturnType<typeof getProjectMembers>>>, TError = ErrorType<ApiResponseObject>>(
 slug: string, options?: { query?:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof getProjectMembers>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getProjectMembers>>,
          TError,
          TData
        > , 'initialData'
      >, }

  ):  UseInfiniteQueryResult<TData, TError> & { queryKey: QueryKey }
export function useGetProjectMembersInfinite<TData = InfiniteData<Awaited<ReturnType<typeof getProjectMembers>>>, TError = ErrorType<ApiResponseObject>>(
 slug: string, options?: { query?:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof getProjectMembers>>, TError, TData>>, }

  ):  UseInfiniteQueryResult<TData, TError> & { queryKey: QueryKey }
/**
 * @summary ÌîÑÎ°úÏ†ùÌä∏ Ï∞∏Í∞Ä Î©§Î≤Ñ Ï°∞Ìöå
 */

export function useGetProjectMembersInfinite<TData = InfiniteData<Awaited<ReturnType<typeof getProjectMembers>>>, TError = ErrorType<ApiResponseObject>>(
 slug: string, options?: { query?:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof getProjectMembers>>, TError, TData>>, }

  ):  UseInfiniteQueryResult<TData, TError> & { queryKey: QueryKey } {

  const queryOptions = getGetProjectMembersInfiniteQueryOptions(slug,options)

  const query = useInfiniteQuery(queryOptions) as  UseInfiniteQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



export const getGetProjectMembersQueryOptions = <TData = Awaited<ReturnType<typeof getProjectMembers>>, TError = ErrorType<ApiResponseObject>>(slug: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getProjectMembers>>, TError, TData>>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetProjectMembersQueryKey(slug);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getProjectMembers>>> = ({ signal }) => getProjectMembers(slug, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(slug),  staleTime: 300000,  ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getProjectMembers>>, TError, TData> & { queryKey: QueryKey }
}

export type GetProjectMembersQueryResult = NonNullable<Awaited<ReturnType<typeof getProjectMembers>>>
export type GetProjectMembersQueryError = ErrorType<ApiResponseObject>


export function useGetProjectMembers<TData = Awaited<ReturnType<typeof getProjectMembers>>, TError = ErrorType<ApiResponseObject>>(
 slug: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getProjectMembers>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getProjectMembers>>,
          TError,
          TData
        > , 'initialData'
      >, }

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: QueryKey }
export function useGetProjectMembers<TData = Awaited<ReturnType<typeof getProjectMembers>>, TError = ErrorType<ApiResponseObject>>(
 slug: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getProjectMembers>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getProjectMembers>>,
          TError,
          TData
        > , 'initialData'
      >, }

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey }
export function useGetProjectMembers<TData = Awaited<ReturnType<typeof getProjectMembers>>, TError = ErrorType<ApiResponseObject>>(
 slug: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getProjectMembers>>, TError, TData>>, }

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey }
/**
 * @summary ÌîÑÎ°úÏ†ùÌä∏ Ï∞∏Í∞Ä Î©§Î≤Ñ Ï°∞Ìöå
 */

export function useGetProjectMembers<TData = Awaited<ReturnType<typeof getProjectMembers>>, TError = ErrorType<ApiResponseObject>>(
 slug: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getProjectMembers>>, TError, TData>>, }

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } {

  const queryOptions = getGetProjectMembersQueryOptions(slug,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



/**
 * @summary ÌîÑÎ°úÏ†ùÌä∏ ÏÉÅÏÑ∏ Ï°∞Ìöå
 */
export const getProjectDetail = (
    slug: string,
 signal?: AbortSignal
) => {
      
      
      return customInstance<ApiResponseProjectData>(
      {url: `/api/v1/projects/${slug}`, method: 'GET', signal
    },
      );
    }
  

export const getGetProjectDetailQueryKey = (slug: string,) => {
    return [`/api/v1/projects/${slug}`] as const;
    }

    
export const getGetProjectDetailInfiniteQueryOptions = <TData = InfiniteData<Awaited<ReturnType<typeof getProjectDetail>>>, TError = ErrorType<ApiResponseObject>>(slug: string, options?: { query?:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof getProjectDetail>>, TError, TData>>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetProjectDetailQueryKey(slug);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getProjectDetail>>> = ({ signal }) => getProjectDetail(slug, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(slug),  staleTime: 300000,  ...queryOptions} as UseInfiniteQueryOptions<Awaited<ReturnType<typeof getProjectDetail>>, TError, TData> & { queryKey: QueryKey }
}

export type GetProjectDetailInfiniteQueryResult = NonNullable<Awaited<ReturnType<typeof getProjectDetail>>>
export type GetProjectDetailInfiniteQueryError = ErrorType<ApiResponseObject>


export function useGetProjectDetailInfinite<TData = InfiniteData<Awaited<ReturnType<typeof getProjectDetail>>>, TError = ErrorType<ApiResponseObject>>(
 slug: string, options: { query:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof getProjectDetail>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getProjectDetail>>,
          TError,
          TData
        > , 'initialData'
      >, }

  ):  DefinedUseInfiniteQueryResult<TData, TError> & { queryKey: QueryKey }
export function useGetProjectDetailInfinite<TData = InfiniteData<Awaited<ReturnType<typeof getProjectDetail>>>, TError = ErrorType<ApiResponseObject>>(
 slug: string, options?: { query?:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof getProjectDetail>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getProjectDetail>>,
          TError,
          TData
        > , 'initialData'
      >, }

  ):  UseInfiniteQueryResult<TData, TError> & { queryKey: QueryKey }
export function useGetProjectDetailInfinite<TData = InfiniteData<Awaited<ReturnType<typeof getProjectDetail>>>, TError = ErrorType<ApiResponseObject>>(
 slug: string, options?: { query?:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof getProjectDetail>>, TError, TData>>, }

  ):  UseInfiniteQueryResult<TData, TError> & { queryKey: QueryKey }
/**
 * @summary ÌîÑÎ°úÏ†ùÌä∏ ÏÉÅÏÑ∏ Ï°∞Ìöå
 */

export function useGetProjectDetailInfinite<TData = InfiniteData<Awaited<ReturnType<typeof getProjectDetail>>>, TError = ErrorType<ApiResponseObject>>(
 slug: string, options?: { query?:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof getProjectDetail>>, TError, TData>>, }

  ):  UseInfiniteQueryResult<TData, TError> & { queryKey: QueryKey } {

  const queryOptions = getGetProjectDetailInfiniteQueryOptions(slug,options)

  const query = useInfiniteQuery(queryOptions) as  UseInfiniteQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



export const getGetProjectDetailQueryOptions = <TData = Awaited<ReturnType<typeof getProjectDetail>>, TError = ErrorType<ApiResponseObject>>(slug: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getProjectDetail>>, TError, TData>>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetProjectDetailQueryKey(slug);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getProjectDetail>>> = ({ signal }) => getProjectDetail(slug, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(slug),  staleTime: 300000,  ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getProjectDetail>>, TError, TData> & { queryKey: QueryKey }
}

export type GetProjectDetailQueryResult = NonNullable<Awaited<ReturnType<typeof getProjectDetail>>>
export type GetProjectDetailQueryError = ErrorType<ApiResponseObject>


export function useGetProjectDetail<TData = Awaited<ReturnType<typeof getProjectDetail>>, TError = ErrorType<ApiResponseObject>>(
 slug: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getProjectDetail>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getProjectDetail>>,
          TError,
          TData
        > , 'initialData'
      >, }

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: QueryKey }
export function useGetProjectDetail<TData = Awaited<ReturnType<typeof getProjectDetail>>, TError = ErrorType<ApiResponseObject>>(
 slug: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getProjectDetail>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getProjectDetail>>,
          TError,
          TData
        > , 'initialData'
      >, }

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey }
export function useGetProjectDetail<TData = Awaited<ReturnType<typeof getProjectDetail>>, TError = ErrorType<ApiResponseObject>>(
 slug: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getProjectDetail>>, TError, TData>>, }

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey }
/**
 * @summary ÌîÑÎ°úÏ†ùÌä∏ ÏÉÅÏÑ∏ Ï°∞Ìöå
 */

export function useGetProjectDetail<TData = Awaited<ReturnType<typeof getProjectDetail>>, TError = ErrorType<ApiResponseObject>>(
 slug: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getProjectDetail>>, TError, TData>>, }

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } {

  const queryOptions = getGetProjectDetailQueryOptions(slug,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



/**
 * @summary ÌîÑÎ°úÏ†ùÌä∏ Î¶¥Î¶¨Ï¶à Ï°∞Ìöå
 */
export const getProjectRelease = (
    slug: string,
 signal?: AbortSignal
) => {
      
      
      return customInstance<ApiResponseListReleaseData>(
      {url: `/api/v1/projects/${slug}/releases`, method: 'GET', signal
    },
      );
    }
  

export const getGetProjectReleaseQueryKey = (slug: string,) => {
    return [`/api/v1/projects/${slug}/releases`] as const;
    }

    
export const getGetProjectReleaseInfiniteQueryOptions = <TData = InfiniteData<Awaited<ReturnType<typeof getProjectRelease>>>, TError = ErrorType<ApiResponseObject>>(slug: string, options?: { query?:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof getProjectRelease>>, TError, TData>>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetProjectReleaseQueryKey(slug);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getProjectRelease>>> = ({ signal }) => getProjectRelease(slug, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(slug),  staleTime: 300000,  ...queryOptions} as UseInfiniteQueryOptions<Awaited<ReturnType<typeof getProjectRelease>>, TError, TData> & { queryKey: QueryKey }
}

export type GetProjectReleaseInfiniteQueryResult = NonNullable<Awaited<ReturnType<typeof getProjectRelease>>>
export type GetProjectReleaseInfiniteQueryError = ErrorType<ApiResponseObject>


export function useGetProjectReleaseInfinite<TData = InfiniteData<Awaited<ReturnType<typeof getProjectRelease>>>, TError = ErrorType<ApiResponseObject>>(
 slug: string, options: { query:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof getProjectRelease>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getProjectRelease>>,
          TError,
          TData
        > , 'initialData'
      >, }

  ):  DefinedUseInfiniteQueryResult<TData, TError> & { queryKey: QueryKey }
export function useGetProjectReleaseInfinite<TData = InfiniteData<Awaited<ReturnType<typeof getProjectRelease>>>, TError = ErrorType<ApiResponseObject>>(
 slug: string, options?: { query?:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof getProjectRelease>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getProjectRelease>>,
          TError,
          TData
        > , 'initialData'
      >, }

  ):  UseInfiniteQueryResult<TData, TError> & { queryKey: QueryKey }
export function useGetProjectReleaseInfinite<TData = InfiniteData<Awaited<ReturnType<typeof getProjectRelease>>>, TError = ErrorType<ApiResponseObject>>(
 slug: string, options?: { query?:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof getProjectRelease>>, TError, TData>>, }

  ):  UseInfiniteQueryResult<TData, TError> & { queryKey: QueryKey }
/**
 * @summary ÌîÑÎ°úÏ†ùÌä∏ Î¶¥Î¶¨Ï¶à Ï°∞Ìöå
 */

export function useGetProjectReleaseInfinite<TData = InfiniteData<Awaited<ReturnType<typeof getProjectRelease>>>, TError = ErrorType<ApiResponseObject>>(
 slug: string, options?: { query?:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof getProjectRelease>>, TError, TData>>, }

  ):  UseInfiniteQueryResult<TData, TError> & { queryKey: QueryKey } {

  const queryOptions = getGetProjectReleaseInfiniteQueryOptions(slug,options)

  const query = useInfiniteQuery(queryOptions) as  UseInfiniteQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



export const getGetProjectReleaseQueryOptions = <TData = Awaited<ReturnType<typeof getProjectRelease>>, TError = ErrorType<ApiResponseObject>>(slug: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getProjectRelease>>, TError, TData>>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetProjectReleaseQueryKey(slug);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getProjectRelease>>> = ({ signal }) => getProjectRelease(slug, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(slug),  staleTime: 300000,  ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getProjectRelease>>, TError, TData> & { queryKey: QueryKey }
}

export type GetProjectReleaseQueryResult = NonNullable<Awaited<ReturnType<typeof getProjectRelease>>>
export type GetProjectReleaseQueryError = ErrorType<ApiResponseObject>


export function useGetProjectRelease<TData = Awaited<ReturnType<typeof getProjectRelease>>, TError = ErrorType<ApiResponseObject>>(
 slug: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getProjectRelease>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getProjectRelease>>,
          TError,
          TData
        > , 'initialData'
      >, }

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: QueryKey }
export function useGetProjectRelease<TData = Awaited<ReturnType<typeof getProjectRelease>>, TError = ErrorType<ApiResponseObject>>(
 slug: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getProjectRelease>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getProjectRelease>>,
          TError,
          TData
        > , 'initialData'
      >, }

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey }
export function useGetProjectRelease<TData = Awaited<ReturnType<typeof getProjectRelease>>, TError = ErrorType<ApiResponseObject>>(
 slug: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getProjectRelease>>, TError, TData>>, }

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey }
/**
 * @summary ÌîÑÎ°úÏ†ùÌä∏ Î¶¥Î¶¨Ï¶à Ï°∞Ìöå
 */

export function useGetProjectRelease<TData = Awaited<ReturnType<typeof getProjectRelease>>, TError = ErrorType<ApiResponseObject>>(
 slug: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getProjectRelease>>, TError, TData>>, }

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } {

  const queryOptions = getGetProjectReleaseQueryOptions(slug,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



/**
 * @summary ÌîÑÎ°úÏ†ùÌä∏ ÏÑ±Í≥º Ï°∞Ìöå
 */
export const getProjectAccomplishments = (
    slug: string,
 signal?: AbortSignal
) => {
      
      
      return customInstance<ApiResponseAccomplishmentData>(
      {url: `/api/v1/projects/${slug}/accomplishments`, method: 'GET', signal
    },
      );
    }
  

export const getGetProjectAccomplishmentsQueryKey = (slug: string,) => {
    return [`/api/v1/projects/${slug}/accomplishments`] as const;
    }

    
export const getGetProjectAccomplishmentsInfiniteQueryOptions = <TData = InfiniteData<Awaited<ReturnType<typeof getProjectAccomplishments>>>, TError = ErrorType<ApiResponseObject>>(slug: string, options?: { query?:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof getProjectAccomplishments>>, TError, TData>>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetProjectAccomplishmentsQueryKey(slug);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getProjectAccomplishments>>> = ({ signal }) => getProjectAccomplishments(slug, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(slug),  staleTime: 300000,  ...queryOptions} as UseInfiniteQueryOptions<Awaited<ReturnType<typeof getProjectAccomplishments>>, TError, TData> & { queryKey: QueryKey }
}

export type GetProjectAccomplishmentsInfiniteQueryResult = NonNullable<Awaited<ReturnType<typeof getProjectAccomplishments>>>
export type GetProjectAccomplishmentsInfiniteQueryError = ErrorType<ApiResponseObject>


export function useGetProjectAccomplishmentsInfinite<TData = InfiniteData<Awaited<ReturnType<typeof getProjectAccomplishments>>>, TError = ErrorType<ApiResponseObject>>(
 slug: string, options: { query:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof getProjectAccomplishments>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getProjectAccomplishments>>,
          TError,
          TData
        > , 'initialData'
      >, }

  ):  DefinedUseInfiniteQueryResult<TData, TError> & { queryKey: QueryKey }
export function useGetProjectAccomplishmentsInfinite<TData = InfiniteData<Awaited<ReturnType<typeof getProjectAccomplishments>>>, TError = ErrorType<ApiResponseObject>>(
 slug: string, options?: { query?:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof getProjectAccomplishments>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getProjectAccomplishments>>,
          TError,
          TData
        > , 'initialData'
      >, }

  ):  UseInfiniteQueryResult<TData, TError> & { queryKey: QueryKey }
export function useGetProjectAccomplishmentsInfinite<TData = InfiniteData<Awaited<ReturnType<typeof getProjectAccomplishments>>>, TError = ErrorType<ApiResponseObject>>(
 slug: string, options?: { query?:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof getProjectAccomplishments>>, TError, TData>>, }

  ):  UseInfiniteQueryResult<TData, TError> & { queryKey: QueryKey }
/**
 * @summary ÌîÑÎ°úÏ†ùÌä∏ ÏÑ±Í≥º Ï°∞Ìöå
 */

export function useGetProjectAccomplishmentsInfinite<TData = InfiniteData<Awaited<ReturnType<typeof getProjectAccomplishments>>>, TError = ErrorType<ApiResponseObject>>(
 slug: string, options?: { query?:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof getProjectAccomplishments>>, TError, TData>>, }

  ):  UseInfiniteQueryResult<TData, TError> & { queryKey: QueryKey } {

  const queryOptions = getGetProjectAccomplishmentsInfiniteQueryOptions(slug,options)

  const query = useInfiniteQuery(queryOptions) as  UseInfiniteQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



export const getGetProjectAccomplishmentsQueryOptions = <TData = Awaited<ReturnType<typeof getProjectAccomplishments>>, TError = ErrorType<ApiResponseObject>>(slug: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getProjectAccomplishments>>, TError, TData>>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetProjectAccomplishmentsQueryKey(slug);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getProjectAccomplishments>>> = ({ signal }) => getProjectAccomplishments(slug, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(slug),  staleTime: 300000,  ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getProjectAccomplishments>>, TError, TData> & { queryKey: QueryKey }
}

export type GetProjectAccomplishmentsQueryResult = NonNullable<Awaited<ReturnType<typeof getProjectAccomplishments>>>
export type GetProjectAccomplishmentsQueryError = ErrorType<ApiResponseObject>


export function useGetProjectAccomplishments<TData = Awaited<ReturnType<typeof getProjectAccomplishments>>, TError = ErrorType<ApiResponseObject>>(
 slug: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getProjectAccomplishments>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getProjectAccomplishments>>,
          TError,
          TData
        > , 'initialData'
      >, }

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: QueryKey }
export function useGetProjectAccomplishments<TData = Awaited<ReturnType<typeof getProjectAccomplishments>>, TError = ErrorType<ApiResponseObject>>(
 slug: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getProjectAccomplishments>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getProjectAccomplishments>>,
          TError,
          TData
        > , 'initialData'
      >, }

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey }
export function useGetProjectAccomplishments<TData = Awaited<ReturnType<typeof getProjectAccomplishments>>, TError = ErrorType<ApiResponseObject>>(
 slug: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getProjectAccomplishments>>, TError, TData>>, }

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey }
/**
 * @summary ÌîÑÎ°úÏ†ùÌä∏ ÏÑ±Í≥º Ï°∞Ìöå
 */

export function useGetProjectAccomplishments<TData = Awaited<ReturnType<typeof getProjectAccomplishments>>, TError = ErrorType<ApiResponseObject>>(
 slug: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getProjectAccomplishments>>, TError, TData>>, }

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } {

  const queryOptions = getGetProjectAccomplishmentsQueryOptions(slug,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



/**
 * ÌîÑÎ°úÏ†ùÌä∏ Ïπ¥ÌÖåÍ≥†Î¶¨ Î™©Î°ù Ï°∞Ìöå API ÏûÖÎãàÎã§.
 * @summary ÌîÑÎ°úÏ†ùÌä∏ Ïπ¥ÌÖåÍ≥†Î¶¨ Î™©Î°ù Ï°∞Ìöå
 */
export const getProjectCategories = (
    
 signal?: AbortSignal
) => {
      
      
      return customInstance<ApiResponseSetProjectCategory>(
      {url: `/api/v1/project-categories`, method: 'GET', signal
    },
      );
    }
  

export const getGetProjectCategoriesQueryKey = () => {
    return [`/api/v1/project-categories`] as const;
    }

    
export const getGetProjectCategoriesInfiniteQueryOptions = <TData = InfiniteData<Awaited<ReturnType<typeof getProjectCategories>>>, TError = ErrorType<ApiResponseObject>>( options?: { query?:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof getProjectCategories>>, TError, TData>>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetProjectCategoriesQueryKey();

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getProjectCategories>>> = ({ signal }) => getProjectCategories(signal);

      

      

   return  { queryKey, queryFn,   staleTime: 300000,  ...queryOptions} as UseInfiniteQueryOptions<Awaited<ReturnType<typeof getProjectCategories>>, TError, TData> & { queryKey: QueryKey }
}

export type GetProjectCategoriesInfiniteQueryResult = NonNullable<Awaited<ReturnType<typeof getProjectCategories>>>
export type GetProjectCategoriesInfiniteQueryError = ErrorType<ApiResponseObject>


export function useGetProjectCategoriesInfinite<TData = InfiniteData<Awaited<ReturnType<typeof getProjectCategories>>>, TError = ErrorType<ApiResponseObject>>(
  options: { query:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof getProjectCategories>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getProjectCategories>>,
          TError,
          TData
        > , 'initialData'
      >, }

  ):  DefinedUseInfiniteQueryResult<TData, TError> & { queryKey: QueryKey }
export function useGetProjectCategoriesInfinite<TData = InfiniteData<Awaited<ReturnType<typeof getProjectCategories>>>, TError = ErrorType<ApiResponseObject>>(
  options?: { query?:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof getProjectCategories>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getProjectCategories>>,
          TError,
          TData
        > , 'initialData'
      >, }

  ):  UseInfiniteQueryResult<TData, TError> & { queryKey: QueryKey }
export function useGetProjectCategoriesInfinite<TData = InfiniteData<Awaited<ReturnType<typeof getProjectCategories>>>, TError = ErrorType<ApiResponseObject>>(
  options?: { query?:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof getProjectCategories>>, TError, TData>>, }

  ):  UseInfiniteQueryResult<TData, TError> & { queryKey: QueryKey }
/**
 * @summary ÌîÑÎ°úÏ†ùÌä∏ Ïπ¥ÌÖåÍ≥†Î¶¨ Î™©Î°ù Ï°∞Ìöå
 */

export function useGetProjectCategoriesInfinite<TData = InfiniteData<Awaited<ReturnType<typeof getProjectCategories>>>, TError = ErrorType<ApiResponseObject>>(
  options?: { query?:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof getProjectCategories>>, TError, TData>>, }

  ):  UseInfiniteQueryResult<TData, TError> & { queryKey: QueryKey } {

  const queryOptions = getGetProjectCategoriesInfiniteQueryOptions(options)

  const query = useInfiniteQuery(queryOptions) as  UseInfiniteQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



export const getGetProjectCategoriesQueryOptions = <TData = Awaited<ReturnType<typeof getProjectCategories>>, TError = ErrorType<ApiResponseObject>>( options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getProjectCategories>>, TError, TData>>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetProjectCategoriesQueryKey();

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getProjectCategories>>> = ({ signal }) => getProjectCategories(signal);

      

      

   return  { queryKey, queryFn,   staleTime: 300000,  ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getProjectCategories>>, TError, TData> & { queryKey: QueryKey }
}

export type GetProjectCategoriesQueryResult = NonNullable<Awaited<ReturnType<typeof getProjectCategories>>>
export type GetProjectCategoriesQueryError = ErrorType<ApiResponseObject>


export function useGetProjectCategories<TData = Awaited<ReturnType<typeof getProjectCategories>>, TError = ErrorType<ApiResponseObject>>(
  options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getProjectCategories>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getProjectCategories>>,
          TError,
          TData
        > , 'initialData'
      >, }

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: QueryKey }
export function useGetProjectCategories<TData = Awaited<ReturnType<typeof getProjectCategories>>, TError = ErrorType<ApiResponseObject>>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getProjectCategories>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getProjectCategories>>,
          TError,
          TData
        > , 'initialData'
      >, }

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey }
export function useGetProjectCategories<TData = Awaited<ReturnType<typeof getProjectCategories>>, TError = ErrorType<ApiResponseObject>>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getProjectCategories>>, TError, TData>>, }

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey }
/**
 * @summary ÌîÑÎ°úÏ†ùÌä∏ Ïπ¥ÌÖåÍ≥†Î¶¨ Î™©Î°ù Ï°∞Ìöå
 */

export function useGetProjectCategories<TData = Awaited<ReturnType<typeof getProjectCategories>>, TError = ErrorType<ApiResponseObject>>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getProjectCategories>>, TError, TData>>, }

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } {

  const queryOptions = getGetProjectCategoriesQueryOptions(options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



