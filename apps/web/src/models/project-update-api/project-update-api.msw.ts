/**
 * Generated by orval v7.1.1 üç∫
 * Do not edit manually.
 * PhaseOn API
 * ÌéòÏù¥Ï¶àÏò® API Î¨∏ÏÑú
 * OpenAPI spec version: v1
 */
import {
  faker
} from '@faker-js/faker'
import {
  HttpResponse,
  delay,
  http
} from 'msw'
import type {
  ApiResponseBoolean,
  ApiResponseSetProjectLink
} from '../../types/apis'

export const getUpdateProjectSlugResponseMock = (overrideResponse: Partial< ApiResponseBoolean > = {}): ApiResponseBoolean => ({data: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), error: faker.helpers.arrayElement([{code: faker.word.sample(), message: faker.helpers.arrayElement([faker.word.sample(), undefined]), properties: {
        [faker.string.alphanumeric(5)]: {}
      }}, undefined]), success: faker.datatype.boolean(), ...overrideResponse})

export const getUpdateMembersResponseMock = (overrideResponse: Partial< ApiResponseBoolean > = {}): ApiResponseBoolean => ({data: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), error: faker.helpers.arrayElement([{code: faker.word.sample(), message: faker.helpers.arrayElement([faker.word.sample(), undefined]), properties: {
        [faker.string.alphanumeric(5)]: {}
      }}, undefined]), success: faker.datatype.boolean(), ...overrideResponse})

export const getUpdateProjectLinksResponseMock = (overrideResponse: Partial< ApiResponseSetProjectLink > = {}): ApiResponseSetProjectLink => ({data: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({link: faker.word.sample(), order: faker.number.int({min: undefined, max: undefined}), type: faker.helpers.arrayElement(['INSTAGRAM','NOTION','GITHUB','GOOGLE_PLAY','APP_STORE','YOUTUBE','WEBSITE','ETC'] as const)})), undefined]), error: faker.helpers.arrayElement([{code: faker.word.sample(), message: faker.helpers.arrayElement([faker.word.sample(), undefined]), properties: {
        [faker.string.alphanumeric(5)]: {}
      }}, undefined]), success: faker.datatype.boolean(), ...overrideResponse})


export const getUpdateProjectSlugMockHandler = (overrideResponse?: ApiResponseBoolean | ((info: Parameters<Parameters<typeof http.patch>[1]>[0]) => Promise<ApiResponseBoolean> | ApiResponseBoolean)) => {
  return http.patch('*/api/v1/projects/:slug/slug', async (info) => {await delay(1000);
  
    return new HttpResponse(JSON.stringify(overrideResponse !== undefined 
            ? (typeof overrideResponse === "function" ? await overrideResponse(info) : overrideResponse) 
            : getUpdateProjectSlugResponseMock()),
      { status: 200,
        headers: { 'Content-Type': 'application/json' }
      })
  })
}

export const getUpdateMembersMockHandler = (overrideResponse?: ApiResponseBoolean | ((info: Parameters<Parameters<typeof http.patch>[1]>[0]) => Promise<ApiResponseBoolean> | ApiResponseBoolean)) => {
  return http.patch('*/api/v1/projects/:slug/makers', async (info) => {await delay(1000);
  
    return new HttpResponse(JSON.stringify(overrideResponse !== undefined 
            ? (typeof overrideResponse === "function" ? await overrideResponse(info) : overrideResponse) 
            : getUpdateMembersResponseMock()),
      { status: 200,
        headers: { 'Content-Type': 'application/json' }
      })
  })
}

export const getUpdateProjectLinksMockHandler = (overrideResponse?: ApiResponseSetProjectLink | ((info: Parameters<Parameters<typeof http.patch>[1]>[0]) => Promise<ApiResponseSetProjectLink> | ApiResponseSetProjectLink)) => {
  return http.patch('*/api/v1/projects/:slug/links', async (info) => {await delay(1000);
  
    return new HttpResponse(JSON.stringify(overrideResponse !== undefined 
            ? (typeof overrideResponse === "function" ? await overrideResponse(info) : overrideResponse) 
            : getUpdateProjectLinksResponseMock()),
      { status: 200,
        headers: { 'Content-Type': 'application/json' }
      })
  })
}
export const getUpdateApiMock = () => [
  getUpdateProjectSlugMockHandler(),
  getUpdateMembersMockHandler(),
  getUpdateProjectLinksMockHandler()
]
